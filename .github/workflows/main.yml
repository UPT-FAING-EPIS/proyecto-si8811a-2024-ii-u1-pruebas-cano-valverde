name: Build, Test, Generate Allure Reports and Deploy

on:
  push:
    branches:
      - main
      - feature/feature_pruebas
  pull_request:
    branches:
      - main
      - feature/feature_pruebas
  workflow_dispatch:

jobs:
  # Job para construir el proyecto
  build:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Building the project .."

  # Job para configurar las pruebas
  test-setup:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      testmo-run-id: ${{ steps.run-tests.outputs.testmo-run-id }}

    steps:
      - uses: actions/checkout@v3

      # Crear el entorno virtual
      - name: Set up Python environment
        run: |
          python -m venv venv
          source venv/bin/activate

      # Verificar si la carpeta correcta contiene requirements.txt
      - name: Install dependencies
        run: |
          if [ -f "Valverde-Cano-Pruebas/requirements.txt" ]; then
            pip install -r Valverde-Cano-Pruebas/requirements.txt
          else
            echo "No se encontrÃ³ el archivo requirements.txt"
            exit 1
          fi

      # Actualizar urllib3 para evitar el error de compatibilidad
      - name: Upgrade urllib3
        run: |
          pip install --upgrade urllib3

      # Instalar Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Cambiar a la carpeta correcta y levantar el grid de Selenium
      - name: Set up Selenium Grid with Docker Compose
        working-directory: ./Valverde-Cano-Pruebas
        run: |
          docker-compose up -d

      # Instalar Node.js y las dependencias necesarias
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Testmo CLI
        run: |
          npm install -g @testmo/testmo-cli

      # Crear un test run en Testmo
      - run: |
          npx @testmo/testmo-cli automation:run:create \
            --instance "$TESTMO_URL" \
            --project-id 1 \
            --name "Parallel Selenium Test Run" \
            --source "selenium-tests" > testmo-run-id.txt
          ID=$(cat testmo-run-id.txt)
          echo "testmo-run-id=$ID" >> $GITHUB_OUTPUT
        env:
          TESTMO_URL: ${{ secrets.TESTMO_URL }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}
        id: run-tests

  # Job para ejecutar las pruebas en paralelo
  test:
    needs: test-setup
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox, edge]

    steps:
      - uses: actions/checkout@v3

      # Run the tests in parallel for each browser and generate Allure results
      - name: Run Selenium tests
        working-directory: ./Valverde-Cano-Pruebas
        run: |
          pytest --browser=${{ matrix.browser }} --alluredir=./allure-results
          npx @testmo/testmo-cli automation:run:submit-thread \
            --instance "$TESTMO_URL" \
            --run-id "${{ needs.test-setup.outputs.testmo-run-id }}" \
            --results results/*.xml
        env:
          TESTMO_URL: ${{ secrets.TESTMO_URL }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}

      # Upload pytest logs and videos
      - name: Upload pytest logs and videos
        uses: actions/upload-artifact@v3
        with:
          name: pytest-logs-and-videos
          path: ./Valverde-Cano-Pruebas/videos

  # Job para completar las pruebas
  test-complete:
    needs: [test-setup, test]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      # Marcar el test run como completado en Testmo
      - run: |
          npx @testmo/testmo-cli automation:run:complete \
            --instance "$TESTMO_URL" \
            --run-id "${{ needs.test-setup.outputs.testmo-run-id }}"
        env:
          TESTMO_URL: ${{ secrets.TESTMO_URL }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}

      # Generar el reporte de Allure y subirlo como artefacto
      - name: Generate Allure Report
        working-directory: ./Valverde-Cano-Pruebas
        run: |
          allure generate ./allure-results --clean -o ./allure-report

      - name: Upload Allure Report
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: ./Valverde-Cano-Pruebas/allure-report

  # Job para el despliegue
  deploy:
    needs: [test-complete]
    runs-on: ubuntu-latest

    steps:
      - run: echo "Deploying application .."
