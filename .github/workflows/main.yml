name: Selenium Grid with Pytest and Testmo Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout del repositorio
      - uses: actions/checkout@v3

      # Configurar Selenium Grid con Docker
      - name: Configurar Selenium Grid
        run: |
          docker pull selenium/standalone-chrome
          docker run -d -p 4444:4444 --name selenium-grid selenium/standalone-chrome

      # Crear entorno virtual e instalar dependencias
      - name: Crear entorno virtual e instalar dependencias
        working-directory: ./Valverde-Cano-Pruebas  # Establecer el directorio correcto
        run: |
          python3 -m venv venv  # Crear el entorno virtual
          source ./venv/bin/activate  # Activar el entorno virtual
          python3 -m pip install --upgrade pip  # Actualizar pip
          pip install -r requirements.txt  # Instalar dependencias desde requirements.txt

      # Crear la ejecuci贸n de pruebas en Testmo
      - name: Crear ejecuci贸n de prueba en Testmo
        id: testmo-run
        run: |
          RUN_ID=$(npx @testmo/testmo-cli automation:run:create \
            --instance "$TESTMO_URL" \
            --title "Selenium Test Run" \
            --description "Descripci贸n de la ejecuci贸n de prueba" \
            --suite-id 1)  # Cambia el ID del suite si es necesario
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV  # Guardar el RUN_ID en las variables de entorno

        env:
          TESTMO_URL: ${{ secrets.TESTMO_URL }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}

      # Ejecutar pruebas con pytest y Selenium
      - name: Ejecutar pruebas de Selenium con pytest
        working-directory: ./Valverde-Cano-Pruebas  # Establecer el directorio correcto
        run: |
          source ./venv/bin/activate  # Activar el entorno virtual
          python3 -m pytest --browser=chrome --alluredir=./allure-results  # Ejecutar pytest y guardar los resultados
        shell: bash

      # Enviar resultados de las pruebas a Testmo
      - name: Enviar resultados a Testmo
        working-directory: ./Valverde-Cano-Pruebas
        run: |
          npx @testmo/testmo-cli automation:run:submit-thread \
            --instance "$TESTMO_URL" \
            --run-id "$RUN_ID" \
            --results allure-results/*.xml
        env:
          TESTMO_URL: ${{ secrets.TESTMO_URL }}
          TESTMO_TOKEN: ${{ secrets.TESTMO_TOKEN }}
          RUN_ID: ${{ env.RUN_ID }}

      # Generar y subir reporte de Allure
      - name: Generar reporte de Allure
        working-directory: ./Valverde-Cano-Pruebas
        run: |
          allure generate ./allure-results --clean -o ./allure-report

      # Subir el reporte de Allure como artefacto
      - name: Subir reporte de Allure
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: ./Valverde-Cano-Pruebas/allure-report

      # Finalizar el proceso eliminando el contenedor de Selenium
      - name: Finalizar y limpiar
        run: docker rm -f selenium-grid
